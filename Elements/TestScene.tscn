[gd_scene load_steps=19 format=2]

[ext_resource path="res://Elements/Map/Mapa.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/towerDefense_tile065.png" type="Texture" id=2]
[ext_resource path="res://Assets/tower_green.png" type="Texture" id=3]
[ext_resource path="res://Assets/towerDefense_tile038.png" type="Texture" id=4]
[ext_resource path="res://Assets/tower_red.png" type="Texture" id=5]
[ext_resource path="res://Elements/UI.gd" type="Script" id=7]
[ext_resource path="res://Assets/Pausebotthon.png" type="Texture" id=8]
[ext_resource path="res://Assets/foward4.png" type="Texture" id=9]
[ext_resource path="res://Assets/play_botton.png" type="Texture" id=10]
[ext_resource path="res://Assets/UI/HPbar.jpg" type="Texture" id=11]
[ext_resource path="res://Assets/fonts/Xolonium-Regular.ttf" type="DynamicFontData" id=12]
[ext_resource path="res://Elements/playpause.gd" type="Script" id=13]
[ext_resource path="res://Assets/UI/exitRight.png" type="Texture" id=14]

[sub_resource type="GDScript" id=5]
script/source = "extends Node2D

#
#https://gdscript.com/solutions/signals-godot/

signal game_finished(result)

var map_node
var build_mode = false # avisa se esta no modo construcao
var build_valid = false
var build_enemy = false
var build_type
var build_location
var buid_title

var onda_inimigos_atual = 0
var inimigos_ainda_vivos = 0
var base_health  = 100 # Doubled life, so the algorithm has more time to evolve
var total_damage = 0 # Damage logging for statistical purposes

var test_towers
var test_enemies

# Called when the node enters the scene tree for the first time.
func _ready():
	map_node = get_node(\"Mapa\")
	
	for i in get_tree().get_nodes_in_group('build_botoes'):
		var t = i.get_name()
		i.connect('pressed',self,'iniciar_botao', [t])
	#start_next_wave()
	
#######################################################################
#
#  Funções para construção de torres
#
########################################################################

func init_params(towers, enemies):
	test_towers = towers
	test_enemies = enemies

func iniciar_botao(tipo_de_torre):
	if build_mode :
		cancel_build_mode()
	build_type = tipo_de_torre
	build_mode = true
	get_node(\"UI\").set_tower_preview(build_type, get_global_position())
	pass

func update_tower_preview():
	var mouse_position = get_global_mouse_position()
	#determinam a posicao exata para carregar a texture da  torre
	var title_atual    = map_node.get_node('towerexclusion').world_to_map(mouse_position) # coordenadas
	var title_position = map_node.get_node('towerexclusion').map_to_world(title_atual)
	
	# 
	if map_node.get_node('towerexclusion').get_cellv(title_atual) == -1: # o nó é um lugar que vc nao pode construir
		get_node(\"UI\").update_tower_preview(title_position, \"d8b0b0\")
		build_valid = true
		build_location= title_position
		buid_title =  title_atual
	
	else:
		get_node('UI').update_tower_preview(title_position, \"ff002a\")
		build_valid =false
	
func cancel_build_mode():
	build_mode = false
	build_valid = false
	#get_node(\"UI/tower_preview\").queue_free()
	get_node(\"UI/tower_preview\").free() # delete imediatamente
	pass
	
	
func verify_and_build():
	var new_tower
	if build_valid:
		new_tower = load(\"res://Elements/Tower/\" + build_type + \".tscn\").instance()
		new_tower.position = build_location
		new_tower.built = true
		new_tower.type = build_type
		map_node.get_node(\"Torres\").add_child(new_tower,true)
		
		map_node.get_node(\"towerexclusion\").set_cellv(buid_title , 2) # colocando o title obstructed cujo id eh 2 no mapa


func _unhandled_input(event):
	if event.is_action_released(\"ui_cancel\") and build_mode == true:
		cancel_build_mode()
	elif event.is_action_released(\"ui_accept\") and build_mode == true:
		verify_and_build()
		cancel_build_mode()

#######################################################################
#
#  Função 'update'
#
########################################################################

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	
	if build_mode:
		update_tower_preview()
	
	## build next wave
	if !build_enemy && get_tree().get_nodes_in_group(\"Enemy\").size() == 0 && onda_inimigos_atual > 0:
		build_enemy = true
		var wave = AI.start_experiment()
		print(wave)
		start_next_wave_AI(wave)   #### DESCOBRI PQ SE DESCOMENTAR NEW GAME E QUIT PARAM DE FUNCIONAR


#######################################################################
#
#  Funções para inimigos
#
########################################################################

# \"Começa\" a AI, gera nova wave
func start_next_wave(): # roda quando da play e qd o player mata toda a onda
	var wave = retrieve_wave_data()
	yield(get_tree().create_timer(0.5), \"timeout\")#padding
	spawn_enemies(wave)
	
func start_next_wave_AI(wave): # roda quando da play e qd o player mata toda a onda
	yield(get_tree().create_timer(0.5), \"timeout\")#padding
	spawn_enemies(wave)

func retrieve_wave_data():
	var dados_inimigos = [['EnemyRed', 1], ['EnemyGreen', 0.9], ['EnemyGray', 0.2], ['Enemy_tanq', 1], ['EnemyBlue', 0.1], ['EnemyGray', 0.2]]
	inimigos_ainda_vivos = dados_inimigos.size()
	return dados_inimigos
	
func spawn_enemies(wave):
	for i in wave:
		var new_inimigo = load('res://Elements/Enemy/' + i[0] + \".tscn\").instance()
		new_inimigo.connect(\"base_damage\",self, 'on_base_damage')
		map_node.get_node('Path').add_child(new_inimigo,true)
		yield(get_tree().create_timer(i[1]), \"timeout\")#padding
	
	onda_inimigos_atual += 1
	
	build_enemy = false

func on_base_damage(damage):
	total_damage += damage
	base_health = base_health - damage
	#print('damage...', 'hp: ', base_health)
	if base_health <= 0:
		write_data(total_damage)
		emit_signal(\"game_finished\",false)
	else:
		get_node(\"UI\").update_health_bar(base_health)

# File writing at
#   Windows: %APPDATA%\\Godot\\
#   macOS: ~/Library/Application Support/Godot/
#   Linux: ~/.local/share/godot/

func write_data(data):
	var path = 'user://td_data.csv'
	var file = File.new()
	
	# All this to be able to append to file
	if file.file_exists(path):
		file.open(path, File.READ_WRITE)
		file.seek_end()
		file.store_string('; ')
	else:
		file.open(path, File.WRITE)
		
	file.store_string(str(data))
	file.close()
"

[sub_resource type="StreamTexture" id=1]
flags = 4
load_path = "res://.import/foward.png-f6c3c5c892f59746bcc36cccc0f78a81.stex"

[sub_resource type="DynamicFont" id=2]
size = 40
use_filter = true
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=3]
size = 25
use_filter = true
font_data = ExtResource( 12 )

[sub_resource type="DynamicFont" id=4]
size = 40
use_filter = true
font_data = ExtResource( 12 )

[node name="MainScene" type="Node2D"]
script = SubResource( 5 )

[node name="Mapa" parent="." instance=ExtResource( 1 )]
position = Vector2( 2, 0 )

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource( 7 )

[node name="Control" type="Control" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="build" type="VBoxContainer" parent="UI/Control"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -400.0
margin_right = 100.0
rect_min_size = Vector2( 100, 400 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TowerRed" type="TextureButton" parent="UI/Control/build" groups=[
"build_botoes",
]]
margin_left = 10.0
margin_right = 90.0
margin_bottom = 80.0
rect_min_size = Vector2( 80, 80 )
size_flags_horizontal = 4
size_flags_vertical = 4
texture_normal = ExtResource( 2 )
texture_pressed = ExtResource( 4 )
expand = true

[node name="icone" type="TextureRect" parent="UI/Control/build/TowerRed"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 5.0
margin_right = -10.0
margin_bottom = -10.0
texture = ExtResource( 5 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TowerGreen" type="TextureButton" parent="UI/Control/build" groups=[
"build_botoes",
]]
margin_left = 10.0
margin_top = 84.0
margin_right = 90.0
margin_bottom = 164.0
rect_min_size = Vector2( 80, 80 )
size_flags_horizontal = 4
size_flags_vertical = 4
texture_normal = ExtResource( 2 )
texture_pressed = ExtResource( 4 )
expand = true

[node name="icone" type="TextureRect" parent="UI/Control/build/TowerGreen"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 5.0
margin_right = -10.0
margin_bottom = -10.0
texture = ExtResource( 3 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="playpause" type="TextureButton" parent="UI/Control"]
pause_mode = 2
margin_left = 840.0
margin_top = 530.0
margin_right = 906.0
margin_bottom = 580.0
toggle_mode = true
texture_normal = ExtResource( 10 )
texture_pressed = ExtResource( 8 )
expand = true
script = ExtResource( 13 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="speed" type="TextureButton" parent="UI/Control"]
pause_mode = 2
margin_left = 920.0
margin_top = 530.0
margin_right = 986.0
margin_bottom = 580.0
toggle_mode = true
texture_normal = SubResource( 1 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="speed4" type="TextureButton" parent="UI/Control"]
pause_mode = 2
margin_left = 1000.0
margin_top = 530.0
margin_right = 1066.0
margin_bottom = 580.0
toggle_mode = true
texture_normal = ExtResource( 9 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="infobar" type="ColorRect" parent="UI/Control"]
self_modulate = Color( 0.027451, 0.027451, 0.027451, 0.470588 )
anchor_right = 1.0
margin_bottom = 55.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="UI/Control/infobar"]
margin_right = 1093.0
margin_bottom = 55.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control2" type="Control" parent="UI/Control/infobar/HBoxContainer"]
margin_right = 30.0
margin_bottom = 55.0
rect_min_size = Vector2( 30, 0 )

[node name="Money" type="Label" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 34.0
margin_right = 102.0
margin_bottom = 50.0
rect_min_size = Vector2( 0, 50 )
size_flags_horizontal = 4
size_flags_vertical = 0
custom_fonts/font = SubResource( 2 )
text = "$$:"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Money_value" type="Label" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 106.0
margin_right = 178.0
margin_bottom = 50.0
rect_min_size = Vector2( 0, 50 )
size_flags_horizontal = 4
size_flags_vertical = 2
custom_fonts/font = SubResource( 3 )
text = "9999"
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VOLTAR_MENU" type="TextureButton" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 182.0
margin_right = 252.0
margin_bottom = 55.0
rect_min_size = Vector2( 70, 0 )
texture_normal = ExtResource( 14 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HP" type="Label" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 539.0
margin_right = 615.0
margin_bottom = 55.0
size_flags_horizontal = 10
size_flags_vertical = 1
custom_fonts/font = SubResource( 4 )
text = "HP:"

[node name="Barradevida" type="TextureProgress" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 619.0
margin_top = 12.0
margin_right = 1019.0
margin_bottom = 42.0
rect_min_size = Vector2( 400, 30 )
size_flags_horizontal = 4
size_flags_vertical = 4
max_value = 200.0
value = 200.0
texture_under = ExtResource( 11 )
texture_progress = ExtResource( 11 )
tint_under = Color( 0.262745, 0.298039, 0.266667, 1 )
tint_progress = Color( 0.984314, 0.0588235, 0.254902, 1 )
nine_patch_stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="UI/Control/infobar/HBoxContainer/Barradevida"]

[node name="Control" type="Control" parent="UI/Control/infobar/HBoxContainer"]
margin_left = 1023.0
margin_right = 1093.0
margin_bottom = 55.0
rect_min_size = Vector2( 70, 0 )
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="UI/Control/playpause" to="UI" method="_on_Button_pressed"]
[connection signal="pressed" from="UI/Control/speed" to="UI" method="_on_speed_pressed"]
[connection signal="pressed" from="UI/Control/speed4" to="UI" method="_on_speed4_pressed"]
[connection signal="pressed" from="UI/Control/infobar/HBoxContainer/VOLTAR_MENU" to="UI" method="_on_VOLTAR_MENU_pressed"]
